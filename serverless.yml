org: aweperi
app: eventbooking-crud-api
service: eventbooking-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:ScanItem"
          Resource:
            - {"Fn::GetAtt": ["EventsTable", "Arn"]}
            - {"Fn::GetAtt": ["UsersTable", "Arn"]}


functions:
  createEvent:
    handler: src/handlers.createEvent
    name: create-event
    events:
      - httpApi:
          path: /events/create
          method: POST
  bookEvent:
    handler: src/handlers.bookEvent
    name: book-event
    events:
      - httpApi:
          path: /events/{eventId}/book
          method: POST
  getAllEvents:
    handler: src/handlers.getAllEvents
    name: get-all-events
    events:
      - http:
          path: /events
          method: GET
  getEvent:
    handler: src/handlers.getEvent
    name: get-event
    events:
      - http:
          path: /events/{eventId}
          method: GET
  updateEvent:
    handler: src/handlers.updateEvent
    name: update-event
    events:
      - http:
          path: /events/{eventId}
          method: PUT
  deleteEvent:
    handler: src/handlers.deleteEvent
    name: delete-event
    events:
      - http:
          path: /events/{eventId}
          method: DELETE

#   createUser:
#     handler: src/handlers.createUser
#     name: create-user
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: /users
#           method: POST
#   getAllUsers:
#     handler: src/handlers.getAllUsers
#     name: get-all-users
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: /users
#           method: GET
#   getUser:
#     handler: src/handlers.getUser
#     name: get-user
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: /users/{userId}
#           method: GET
#   updateUser:
#     handler: src/handlers.updateUser
#     name: update-user
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: /users/{userId}
#           method: PUT
#   deleteUser:
#     handler: src/handlers.deleteUser
#     name: delete-user
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: /users/{userId}
#           method: DELETE

plugins:
  - serverless-plugin-typescript

resources:
  Resources:
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventsTable
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId: 
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false