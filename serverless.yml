service: eventbooking-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment:
    USER_TABLENAME: ${self:custom.usersTableName}
    EVENT_TABLENAME: ${self:custom.eventsTableName}

custom:
  usersTableName: UsersTable
  eventsTableName: EventsTable

plugins:
  - serverless-plugin-typescript

iam:
  role:
    statements:
      - Effect:
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:ScanItem"
          - "dynamodb:UpdateItem"
        Resource:
          - {"fn:GetAtt": ["EventsTable", "Arn"]}
          - {"fn:GetAtt": ["UsersTable", "Arn"]}

functions:
  createEvent:
    handler: src/handlers.createEvent
    name: create-event
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - httpApi:
          path: /events/create
          method: POST
  bookEvent:
    handler: src/handlers.bookEvent
    name: book-event
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - httpApi:
          path: /events/book
          method: POST
  getAllEvents:
    handler: src/handlers.getAllEvents
    name: get-all-events
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /events
          method: GET
  getEvent:
    handler: src/handlers.getEvent
    name: get-event
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /events/{eventId}
          method: GET
  updateEvent:
    handler: src/handlers.updateEvent
    name: update-event
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /events/{eventId}
          method: PUT
  deleteEvent:
    handler: src/handlers.deleteEvent
    name: delete-event
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /events/{eventId}
          method: DELETE

  createUser:
    handler: src/handlers.createUser
    name: create-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /users
          method: POST
  getAllUsers:
    handler: src/handlers.getAllUsers
    name: get-all-users
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /users
          method: GET
  getUser:
    handler: src/handlers.getUser
    name: get-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /users/{userId}
          method: GET
  updateUser:
    handler: src/handlers.updateUser
    name: update-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /users/{userId}
          method: PUT
  deleteUser:
    handler: src/handlers.deleteUser
    name: delete-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: /users/{userId}
          method: DELETE

resources:
  Resources:
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.eventsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1